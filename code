# %%
# Import Dependencies
import pandas as pd

# %%
# Create a path to the csv and read it into a Pandas DataFrame

client_df = pd.read_csv("client_dataset.csv")

client_df.head()

# %%
# What three item categories had the most entries?
top_categories = client_df['category'].value_counts().head(3)

# %%
# For the category with the most entries, which subcategory had the most entries?
top_category = top_categories.index[0]
top_subcategory_in_top_category = client_df [client_df['category'] == top_category]['subcategory'].value_counts().idxmax()


# %%
# Which five clients had the most entries in the data?
top_clients = client_df ['client_id'].value_counts().head(5)

# %%
# Store the client IDs of those top 5 clients in a list
top_clients = client_df.index.to_list()


# %% [markdown]
# # How many total units (the qty column) did the client with the most entries order?
# top_client_id = top_clients.index[0]
# total_units_top_client = client_df[ client_df ['client_id'] == top_client_id]['qty'].sum()

# %%
# Create a column that calculates the subtotal for each line using the unit_price and the qty
client_df ['subtotal'] = client_df ['unit_cost'] * client_df  ['qty']

# %%
# Create a column for shipping price
client_df ['shipping_price'] =   client_df ['unit_weight'].apply(lambda x: 7 * x if x > 50 else 10 * x)

# %%
# Create a column for the total price using the subtotal and the shipping price along with a sales tax of 9.25%
client_df ['unit_price'] = (client_df['subtotal'] + client_df['shipping_price']) * 9.25

# %%
# Create a column for the cost of each line using unit cost, qty, and shipping price (assume the shipping cost is exactly what is charged to the client).
client_df ['line_cost'] = client_df ['unit_cost'] * client_df ['qty'] + client_df ['shipping_price']

# %%
# Create a column for the profit of each line using line cost and line price.
client_df ['line_profit'] = client_df ['unit_price'] - client_df ['unit_cost']


# %%
# How much did each of the top 5 clients by quantity spend? Use your work from Part 1 for client ids?
top_clients_spent  = (client_df ['client_id'] loc. ,['unit_cost'])

client_df.head()



# %%
# Create a summary DataFrame showing the totals for the top 5 clients with the following information: total units purchased, total shipping price, total revenue, and total profit.
summary_data = client_df ['client_id'].isin ('summary_data') = client_df ['client_id'].isin (top_clients_list).groupby('client_id').agg(
).groupby('client_id').agg(
    total_units_purchased=pd.NamedAgg(column='qty', aggfunc='sum'),
    total_shipping_price=pd.NamedAgg(column='shipping_price', aggfunc='sum'),
    total_revenue=pd.NamedAgg(column='total_price', aggfunc='sum'),
    total_profit=pd.NamedAgg(column='line_profit', aggfunc='sum')
).reset_index()

print(summary_data)


# %%
# Create a function to change the currency to millions of dollars. Format the data and rename the columns to names suitable for presentation. Then, sort the DataFrame in descending order by total profits.
summary_data[['total_units_purchased', 'total_shipping_price', 'total_revenue', 'total_profit']] = summary_data[['total_units_purchased', 'total_shipping_price', 'total_revenue', 'total_profit']].applymap(format_to_millions)

summary_data.rename(columns={
    'client_id': 'Client ID',
    'total_units_purchased': 'Total Units Purchased (Millions)',
    'total_shipping_price': 'Total Shipping Price (Millions)',
    'total_revenue': 'Total Revenue (Millions)',
    'total_profit': 'Total Profit (Millions)'
}, inplace=True)

summary_data_sorted = summary_data.sort_values(by='Total Profit (Millions)', ascending=False).reset_index(drop=True)

print(summary_data_sorted)

summary_data_sorted.to_csv('client_dataset.csv', index=False)



